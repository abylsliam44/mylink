version: '3.9'

services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-smartbot_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
      QDRANT__SERVICE__API_KEY: ${QDRANT_API_KEY:-}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-smartbot_db}
      DATABASE_URL_SYNC: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-smartbot_db}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-}@redis:6379/0
      
      # Qdrant
      QDRANT_URL: ${QDRANT_URL:-}
      QDRANT_API_KEY: ${QDRANT_API_KEY:-}
      QDRANT_HOST: qdrant
      QDRANT_PORT: 6333
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4o-mini}
      OPENAI_TIMEOUT: ${OPENAI_TIMEOUT:-30}
      OPENAI_MAX_RETRIES: ${OPENAI_MAX_RETRIES:-2}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      ALLOWED_ORIGIN_REGEX: ${ALLOWED_ORIGIN_REGEX:-null}
      
      # App
      DEBUG: ${DEBUG:-False}
      AI_APPROVAL_THRESHOLD: ${AI_APPROVAL_THRESHOLD:-70}
      AI_MAX_QUESTIONS: ${AI_MAX_QUESTIONS:-3}
      AI_TONE: ${AI_TONE:-professional}
      
      # Autonomous Agents
      AGENT_HEALTH_CHECK_INTERVAL: ${AGENT_HEALTH_CHECK_INTERVAL:-30}
      AGENT_MAX_RETRIES: ${AGENT_MAX_RETRIES:-3}
      AGENT_QUEUE_SIZE: ${AGENT_QUEUE_SIZE:-1000}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    environment:
      VITE_API_BASE: ${VITE_API_BASE:-http://localhost:8000}
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

volumes:
  postgres_data:
  redis_data:
  qdrant_data:

